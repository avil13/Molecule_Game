Molecule.module('Barrel', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('barrel'),
        init: function() {
            this.sprite.animation.add('wait', {
                speed: 1,
                frames: [0],
                loop: false
            });
            this.sprite.animation.add('barrel_red', {
                speed: 1,
                frames: [1, 0, 1, 0]
            });
            this.sprite.animation.add('barrel_green', {
                speed: 1,
                frames: [2]
            });
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
            this.sprite.position.x = this.x !== void 0 ? this.x : 100;
            this.sprite.position.y = this.y !== void 0 ? this.y : 100;
            this.sprite.animation.stop();
            this.sprite.animation.run('wait');
            this.sprite.acceleration.x = 1;
        },
        update: function() {
            var sp, sp_id;
            if (this.sprite.collision.boundaries.left) {
                this.sprite.acceleration.x = 1;
            } else if (this.sprite.collision.boundaries.right) {
                this.sprite.acceleration.x = -1;
            }
            if (this.sprite.collision.sprite.id !== null) {
                sp_id = this.sprite.collision.sprite.id;
                sp = game.sprite.get(function(sprite) {
                    if (sprite.id === sp_id) {
                        return sprite;
                    }
                });
                if (sp && sp[0] && sp[0].name) {
                    console.log(sp[0].name);
                }
                this.sprite.animation.run('barrel_red', {
                    loop: false
                });
            }
            if (this.sprite.animation.current.animation === 1 && this.sprite.animation.end) {
                game.molecule.add('Boom', {
                    x: this.sprite.position.x,
                    y: this.sprite.position.y
                });
                game.remove(this);
            }
        }
    });
});

Molecule.module('Boom', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('boom'),
        init: function() {
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
            this.sprite.position.x = (this.x != null ? this.x : -1000);
            this.sprite.position.y = (this.y != null ? this.y : -1000);
            this.sprite.animation.add('fire', {
                speed: 0.6,
                frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
            });
            this.sprite.animation.run('fire', {
                loop: false,
                reverse: false
            });
        },
        update: function() {
            if (this.sprite.animation.end) {
                game.remove(this);
            }
        }
    });
});


/*

Molecule.module 'BoomOnEarth', (game)->
    return game.molecule.define
                sprite: game.sprite.create 'boomOnEarth'

                init: ->
                    @sprite.animation.add 'fire2', { speed: 0.9, frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}

                    do @sprite.animation.stop

                    @sprite.animation.run 'fire2', {loop: on, reverse: no }

                    @sprite.position.x = game.canvas.width / 3
                    @sprite.position.y = game.canvas.height / 3

                    return

                update: ->

                    return
 */

//# sourceMappingURL=data:application/json;base64,