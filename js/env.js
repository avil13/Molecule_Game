Molecule.module('Barrel', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('barrel'),
        init: function() {
            this.sprite.animation.add('wait', {
                speed: 1,
                frames: [0],
                loop: false
            });
            this.sprite.animation.add('barrel_red', {
                speed: 1,
                frames: [1, 0, 1, 0]
            });
            this.sprite.animation.add('barrel_green', {
                speed: 1,
                frames: [2]
            });
            this.sprite.collides.boundaries = false;
            this.sprite.animation.stop();
            this.sprite.animation.run('wait');
            this.sprite.collides.boundaries = true;
            this.sprite.position.x = 20;
            this.sprite.position.y = 200;
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
        },
        update: function() {
            var sp, sp_id;
            this.sprite.acceleration.x = 0.1;
            if (this.sprite.collision.sprite.id !== null) {
                sp_id = this.sprite.collision.sprite.id;
                sp = game.sprite.get(function(sprite) {
                    if (sprite.id === sp_id) {
                        return sprite;
                    }
                });
                console.log(sp[0].name);
                this.sprite.animation.run('barrel_red', {
                    loop: false
                });
            }
            if (this.sprite.animation.current.animation === 1 && this.sprite.animation.end) {
                game.molecule.add('Boom', {
                    x: this.sprite.position.x,
                    y: this.sprite.position.y
                });
                game.remove(this);
            }
        }
    });
});

Molecule.module('Boom', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('boom'),
        init: function() {
            this.sprite.position.x = this.x !== void 0 ? this.x : -100;
            this.sprite.position.y = this.y !== void 0 ? this.y : -100;
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
            this.sprite.collides.sprite = false;
            this.sprite.collides.boundaries = false;
            this.sprite.collides.group = 0;
            this.sprite.scrollable = false;
            this.sprite.animation.add('fire', {
                speed: 0.6,
                frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                loop: true
            });
            if (this.x && this.y) {
                this.sprite.animation.run('fire', {
                    loop: false,
                    reverse: false
                });
            }
        },
        update: function() {
            if (this.sprite.animation.end) {
                game.remove(this);
            }
        }
    });
});


/*

Molecule.module 'BoomOnEarth', (game)->
    return game.molecule.define
                sprite: game.sprite.create 'boomOnEarth'

                init: ->
                    @sprite.animation.add 'fire2', { speed: 0.9, frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]}

                    do @sprite.animation.stop

                    @sprite.animation.run 'fire2', {loop: on, reverse: no }

                    @sprite.position.x = game.canvas.width / 3
                    @sprite.position.y = game.canvas.height / 3

                    return

                update: ->

                    return
 */

//# sourceMappingURL=data:application/json;base64,