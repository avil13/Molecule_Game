Molecule.module('Barrel', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('barrel'),
        init: function() {
            this.sprite.animation.add('wait', {
                frames: [0],
                speed: 1
            });
            this.sprite.animation.add('barrel_red', {
                frames: [1, 0, 1, 0],
                speed: 1
            });
            this.sprite.animation.add('barrel_green', {
                frames: [2],
                speed: 1
            });
            this.sprite.collides.group = 1;
            this.sprite.collides.boundaries = false;
            this.sprite.animation.stop();
            this.sprite.animation.run('wait', {
                loop: false,
                reverse: false
            });
            this.sprite.scrollable = false;
            this.sprite.position.x = 100;
            this.sprite.position.y = 260;
        },
        update: function() {
            if (this.sprite.collision.sprite.id !== null) {
                console.log('Yes');
                this.sprite.animation.run('barrel_red', {
                    loop: true
                });
                game.molecule.add('Boom', {
                    x: this.sprite.position.x,
                    y: this.sprite.position.y
                });
            }
        }
    });
});

Molecule.module('Boom', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('boom'),
        init: function() {
            this.sprite.position.x = this.x;
            this.sprite.position.y = this.y;
            this.sprite.animation.add('fire', {
                frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                speed: 0.6
            });
            this.sprite.animation.stop();
            this.sprite.animation.run('fire', {
                loop: true,
                reverse: false
            });
        },
        update: function() {
            if (this.sprite.animation.end) {
                game.remove(this);
            }
        }
    });
});

Molecule.module('BoomOnEarth', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('boomOnEarth'),
        init: function() {
            this.sprite.animation.add('fire2', {
                frames: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
                speed: 0.9
            });
            this.sprite.animation.stop();
            this.sprite.animation.run('fire2', {
                loop: true,
                reverse: false
            });
            this.sprite.position.x = game.canvas.width / 3;
            this.sprite.position.y = game.canvas.height / 3;
        },
        update: function() {}
    });
});

//# sourceMappingURL=data:application/json;base64,