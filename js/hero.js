Molecule.module('Hero', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('hero'),
        init: function() {
            this.sprite.animation.add('run', {
                frames: [12, 13, 14, 15, 16, 17],
                speed: 0.77
            });
            this.sprite.animation.add('wait', {
                frames: [0, 1, 2, 3, 4],
                speed: 0.7
            });
            this.sprite.animation.add('jump', {
                frames: [6, 6, 7, 8, 9, 10],
                speed: 0.1
            });
            this.sprite.animation.add('jump_up', {
                frames: [6, 6, 6, 7, 8],
                speed: 0.1
            });
            this.sprite.animation.add('jump_down', {
                frames: [8, 9, 10],
                speed: 0.1
            });
            this.sprite.animation.add('sit', {
                frames: [6],
                speed: 0.1
            });
            this.sprite.animation.add('hit', {
                frames: [18, 19, 20, 21, 22],
                speed: 0.5
            });
            this.sprite.collides.boundaries = true;
            this.sprite.animation.stop();
            this.sprite.animation.run('wait', {
                loop: true,
                reverse: false
            });
            this.sprite.scrollable = false;
            this.sprite.position.x = 200;
            this.sprite.position.y = 200;
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
        },
        update: function() {
            if (game.input.key.SPACE) {
                this.sprite.animation.run('hit', {
                    loop: true
                });
            } else if (game.input.key.LEFT_ARROW) {
                this.sprite.flip.x = false;
                this.sprite.animation.run('run', {
                    loop: true
                });
                this.sprite.position.x -= 3;
            } else if (game.input.key.RIGHT_ARROW) {
                this.sprite.flip.x = true;
                this.sprite.animation.run('run', {
                    loop: true
                });
                this.sprite.position.x += 3;
            }
            if (game.input.key.DOWN_ARROW) {
                this.sprite.animation.run('sit', {
                    loop: false
                });
                this.sprite.position.y += 3;
            }
            if (game.input.key.UP_ARROW) {
                this.sprite.animation.run('jump', {
                    loop: false
                });
                this.sprite.position.y -= 3;
            }
            if (!game.input.key.LEFT_ARROW && !game.input.key.RIGHT_ARROW && !game.input.key.SPACE && !game.input.key.DOWN_ARROW && !game.input.key.UP_ARROW) {
                this.sprite.animation.run('wait', {
                    loop: true,
                    reverse: false
                });
            }
        },
        gravity: function() {
            if (this.sprite.position.y - this.sprite.anchor.y < 70) {
                game.physics.gravity.y = 9.78 / 60;
                this.sprite.animation.run('jump_down', {
                    loop: false,
                    reverse: false
                });
            } else if (this.sprite.position.y + this.sprite.anchor.y > game.width - 70) {
                game.physics.gravity.y = -9.78 / 60;
                this.sprite.animation.run('jump_up', {
                    loop: false,
                    reverse: false
                });
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlcm8uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLE1BQWhCLEVBQXdCLFNBQUMsSUFBRCxHQUFBO0FBQ3BCLFNBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFkLENBQ0k7QUFBQSxJQUFBLE1BQUEsRUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQVosQ0FBbUIsTUFBbkIsQ0FBUjtBQUFBLElBRUEsSUFBQSxFQUFNLFNBQUEsR0FBQTtBQUNGLE1BQUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsS0FBdEIsRUFBNkI7QUFBQSxRQUFDLE1BQUEsRUFBUSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsRUFBaUIsRUFBakIsRUFBcUIsRUFBckIsQ0FBVDtBQUFBLFFBQW1DLEtBQUEsRUFBTyxJQUExQztPQUE3QixDQUFBLENBQUE7QUFBQSxNQUVBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLE1BQXRCLEVBQThCO0FBQUEsUUFBQyxNQUFBLEVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFUO0FBQUEsUUFBMEIsS0FBQSxFQUFPLEdBQWpDO09BQTlCLENBRkEsQ0FBQTtBQUFBLE1BSUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsTUFBdEIsRUFBOEI7QUFBQSxRQUFDLE1BQUEsRUFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLEVBQWhCLENBQVQ7QUFBQSxRQUE4QixLQUFBLEVBQU8sR0FBckM7T0FBOUIsQ0FKQSxDQUFBO0FBQUEsTUFNQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFsQixDQUFzQixTQUF0QixFQUFpQztBQUFBLFFBQUMsTUFBQSxFQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBVDtBQUFBLFFBQTRCLEtBQUEsRUFBTyxHQUFuQztPQUFqQyxDQU5BLENBQUE7QUFBQSxNQVFBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLFdBQXRCLEVBQW1DO0FBQUEsUUFBQyxNQUFBLEVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEVBQVAsQ0FBVDtBQUFBLFFBQXFCLEtBQUEsRUFBTyxHQUE1QjtPQUFuQyxDQVJBLENBQUE7QUFBQSxNQVVBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLEtBQXRCLEVBQTZCO0FBQUEsUUFBQyxNQUFBLEVBQVEsQ0FBQyxDQUFELENBQVQ7QUFBQSxRQUFjLEtBQUEsRUFBTyxHQUFyQjtPQUE3QixDQVZBLENBQUE7QUFBQSxNQVlBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLEtBQXRCLEVBQTZCO0FBQUEsUUFBQyxNQUFBLEVBQVEsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsRUFBYSxFQUFiLEVBQWlCLEVBQWpCLENBQVQ7QUFBQSxRQUErQixLQUFBLEVBQU8sR0FBdEM7T0FBN0IsQ0FaQSxDQUFBO0FBQUEsTUFjQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFqQixHQUE4QixJQWQ5QixDQUFBO0FBQUEsTUFnQkcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBckIsQ0FBQSxDQWhCQSxDQUFBO0FBQUEsTUFpQkEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsTUFBdEIsRUFBOEI7QUFBQSxRQUFBLElBQUEsRUFBTSxJQUFOO0FBQUEsUUFBVSxPQUFBLEVBQVMsS0FBbkI7T0FBOUIsQ0FqQkEsQ0FBQTtBQUFBLE1BbUJBLElBQUMsQ0FBQSxNQUFNLENBQUMsVUFBUixHQUFxQixLQW5CckIsQ0FBQTtBQUFBLE1BcUJBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWpCLEdBQXFCLEdBckJyQixDQUFBO0FBQUEsTUFzQkEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsR0FBcUIsR0F0QnJCLENBQUE7QUFBQSxNQXdCQSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFmLEdBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixHQUFnQixDQXhCbkMsQ0FBQTtBQUFBLE1BeUJBLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQWYsR0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLENBekJwQyxDQURFO0lBQUEsQ0FGTjtBQUFBLElBa0NBLE1BQUEsRUFBUSxTQUFBLEdBQUE7QUFDSixNQUFBLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBbEI7QUFFSSxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLEtBQXRCLEVBQTZCO0FBQUEsVUFBQyxJQUFBLEVBQU0sSUFBUDtTQUE3QixDQUFBLENBRko7T0FBQSxNQUlLLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBbEI7QUFDRCxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQWIsR0FBaUIsS0FBakIsQ0FBQTtBQUFBLFFBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsS0FBdEIsRUFBNkI7QUFBQSxVQUFDLElBQUEsRUFBTSxJQUFQO1NBQTdCLENBREEsQ0FBQTtBQUFBLFFBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsSUFBc0IsQ0FGdEIsQ0FEQztPQUFBLE1BS0EsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFsQjtBQUNELFFBQUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBYixHQUFpQixJQUFqQixDQUFBO0FBQUEsUUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFsQixDQUFzQixLQUF0QixFQUE2QjtBQUFBLFVBQUMsSUFBQSxFQUFNLElBQVA7U0FBN0IsQ0FEQSxDQUFBO0FBQUEsUUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFqQixJQUFzQixDQUZ0QixDQURDO09BVEw7QUFjQSxNQUFBLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBbEI7QUFDSSxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLEtBQXRCLEVBQTZCO0FBQUEsVUFBQyxJQUFBLEVBQU0sS0FBUDtTQUE3QixDQUFBLENBQUE7QUFBQSxRQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWpCLElBQXNCLENBRHRCLENBREo7T0FkQTtBQWtCQSxNQUFBLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBbEI7QUFDSSxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQWxCLENBQXNCLE1BQXRCLEVBQThCO0FBQUEsVUFBQyxJQUFBLEVBQU0sS0FBUDtTQUE5QixDQUFBLENBQUE7QUFBQSxRQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWpCLElBQXNCLENBRHRCLENBREo7T0FsQkE7QUFzQkEsTUFBQSxJQUFHLENBQUEsSUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBaEIsSUFBOEIsQ0FBQSxJQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUE5QyxJQUE2RCxDQUFBLElBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQTdFLElBQXNGLENBQUEsSUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBdEcsSUFBb0gsQ0FBQSxJQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUF2STtBQUVJLFFBQUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsTUFBdEIsRUFBOEI7QUFBQSxVQUFBLElBQUEsRUFBTSxJQUFOO0FBQUEsVUFBVSxPQUFBLEVBQVMsS0FBbkI7U0FBOUIsQ0FBQSxDQUZKO09BdkJJO0lBQUEsQ0FsQ1I7QUFBQSxJQWlFQSxPQUFBLEVBQVMsU0FBQSxHQUFBO0FBQ0wsTUFBQSxJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWpCLEdBQXFCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQXBDLEdBQXdDLEVBQTNDO0FBQ0ksUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFyQixHQUF5QixJQUFBLEdBQU8sRUFBaEMsQ0FBQTtBQUFBLFFBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBbEIsQ0FBc0IsV0FBdEIsRUFDSTtBQUFBLFVBQUEsSUFBQSxFQUFNLEtBQU47QUFBQSxVQUFVLE9BQUEsRUFBUyxLQUFuQjtTQURKLENBREEsQ0FESjtPQUFBLE1BS0ssSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFwQyxHQUF3QyxJQUFJLENBQUMsS0FBTCxHQUFhLEVBQXhEO0FBQ0QsUUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFyQixHQUF5QixDQUFBLElBQUEsR0FBUSxFQUFqQyxDQUFBO0FBQUEsUUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFsQixDQUFzQixTQUF0QixFQUNJO0FBQUEsVUFBQSxJQUFBLEVBQU0sS0FBTjtBQUFBLFVBQVUsT0FBQSxFQUFTLEtBQW5CO1NBREosQ0FEQSxDQURDO09BTkE7SUFBQSxDQWpFVDtHQURKLENBQVIsQ0FEb0I7QUFBQSxDQUF4QixDQUFBLENBQUEiLCJmaWxlIjoiaGVyby5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIk1vbGVjdWxlLm1vZHVsZSAnSGVybycsIChnYW1lKS0+XG4gICAgcmV0dXJuICBnYW1lLm1vbGVjdWxlLmRlZmluZVxuICAgICAgICAgICAgICAgIHNwcml0ZTogZ2FtZS5zcHJpdGUuY3JlYXRlICdoZXJvJ1xuXG4gICAgICAgICAgICAgICAgaW5pdDogLT5cbiAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5hbmltYXRpb24uYWRkICdydW4nLCB7ZnJhbWVzOiBbMTIsIDEzLCAxNCwgMTUsIDE2LCAxN10sIHNwZWVkOiAwLjc3IH1cblxuICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5hZGQgJ3dhaXQnLCB7ZnJhbWVzOiBbMCwgMSwgMiwgMywgNF0sIHNwZWVkOiAwLjcgfVxuXG4gICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLmFkZCAnanVtcCcsIHtmcmFtZXM6IFs2LCA2LCA3LCA4LCA5LCAxMF0sIHNwZWVkOiAwLjEgfVxuXG4gICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLmFkZCAnanVtcF91cCcsIHtmcmFtZXM6IFs2LCA2LCA2LCA3LCA4LCBdLCBzcGVlZDogMC4xIH1cblxuICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5hZGQgJ2p1bXBfZG93bicsIHtmcmFtZXM6IFs4LCA5LCAxMF0sIHNwZWVkOiAwLjEgfVxuXG4gICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLmFkZCAnc2l0Jywge2ZyYW1lczogWzZdLCBzcGVlZDogMC4xIH1cblxuICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5hZGQgJ2hpdCcsIHtmcmFtZXM6IFsxOCwgMTksIDIwLCAyMSwgMjJdLCBzcGVlZDogMC41IH1cblxuICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmNvbGxpZGVzLmJvdW5kYXJpZXMgPSBvblxuXG4gICAgICAgICAgICAgICAgICAgIGRvIEBzcHJpdGUuYW5pbWF0aW9uLnN0b3BcbiAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5hbmltYXRpb24ucnVuICd3YWl0JywgbG9vcDogb24sIHJldmVyc2U6IG5vXG5cbiAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5zY3JvbGxhYmxlID0gbm9cblxuICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLnBvc2l0aW9uLnggPSAyMDAgIyBnYW1lLmNhbnZhcy53aWR0aCAvIDRcbiAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5wb3NpdGlvbi55ID0gMjAwICMgZ2FtZS5jYW52YXMuaGVpZ2h0IC8gMlxuXG4gICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5jaG9yLnggPSBAc3ByaXRlLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5hbmNob3IueSA9IEBzcHJpdGUuaGVpZ2h0IC8gMjtcblxuICAgICAgICAgICAgICAgICAgICAjIGNvbnNvbGUubG9nIEBzcHJpdGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgIyBlbmQgaW5pdFxuXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAtPlxuICAgICAgICAgICAgICAgICAgICBpZiBnYW1lLmlucHV0LmtleS5TUEFDRVxuICAgICAgICAgICAgICAgICAgICAgICAgIyAgaGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5ydW4gJ2hpdCcsIHtsb29wOiBvbn1cblxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGdhbWUuaW5wdXQua2V5LkxFRlRfQVJST1dcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuZmxpcC54ID0gbm9cbiAgICAgICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLnJ1biAncnVuJywge2xvb3A6IG9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5wb3NpdGlvbi54IC09IDNcblxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGdhbWUuaW5wdXQua2V5LlJJR0hUX0FSUk9XXG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmZsaXAueCA9IG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5ydW4gJ3J1bicsIHtsb29wOiBvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIEBzcHJpdGUucG9zaXRpb24ueCArPSAzXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5pbnB1dC5rZXkuRE9XTl9BUlJPV1xuICAgICAgICAgICAgICAgICAgICAgICAgQHNwcml0ZS5hbmltYXRpb24ucnVuICdzaXQnLCB7bG9vcDogbm99XG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLnBvc2l0aW9uLnkgKz0gM1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIGdhbWUuaW5wdXQua2V5LlVQX0FSUk9XXG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5ydW4gJ2p1bXAnLCB7bG9vcDogbm99XG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLnBvc2l0aW9uLnkgLT0gM1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICFnYW1lLmlucHV0LmtleS5MRUZUX0FSUk9XICYmICFnYW1lLmlucHV0LmtleS5SSUdIVF9BUlJPVyAmJiAhZ2FtZS5pbnB1dC5rZXkuU1BBQ0UgJiYgIWdhbWUuaW5wdXQua2V5LkRPV05fQVJST1cgJiYgIWdhbWUuaW5wdXQua2V5LlVQX0FSUk9XXG4gICAgICAgICAgICAgICAgICAgICAgICAjIHN0b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLnJ1biAnd2FpdCcsIGxvb3A6IG9uLCByZXZlcnNlOiBub1xuXG4gICAgICAgICAgICAgICAgICAgICMgZG8gQGdyYXZpdHlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgIyBFbmQgdXBkYXRlXG5cbiAgICAgICAgICAgICAgICBncmF2aXR5OiAtPlxuICAgICAgICAgICAgICAgICAgICBpZiBAc3ByaXRlLnBvc2l0aW9uLnkgLSBAc3ByaXRlLmFuY2hvci55IDwgNzBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGh5c2ljcy5ncmF2aXR5LnkgPSA5Ljc4IC8gNjBcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzcHJpdGUuYW5pbWF0aW9uLnJ1biAnanVtcF9kb3duJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wOiBubywgcmV2ZXJzZTogbm9cblxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIEBzcHJpdGUucG9zaXRpb24ueSArIEBzcHJpdGUuYW5jaG9yLnkgPiBnYW1lLndpZHRoIC0gNzBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGh5c2ljcy5ncmF2aXR5LnkgPSAtOS43OCAvIDYwXG4gICAgICAgICAgICAgICAgICAgICAgICBAc3ByaXRlLmFuaW1hdGlvbi5ydW4gJ2p1bXBfdXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3A6IG5vLCByZXZlcnNlOiBub1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICMgRW5kIGdyYXZpdHlcbiJdfQ==