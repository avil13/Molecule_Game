Molecule.module('Hero', function(game) {
    return game.molecule.define({
        sprite: game.sprite.create('hero'),
        init: function() {
            this.sprite.animation.add('run', {
                frames: [12, 13, 14, 15, 16, 17],
                speed: 0.77
            });
            this.sprite.animation.add('wait', {
                frames: [0, 1, 2, 3, 4],
                speed: 0.7
            });
            this.sprite.animation.add('jump', {
                frames: [6, 6, 7, 7, 8, 9, 10],
                speed: 0.1
            });
            this.sprite.animation.add('jump_up', {
                frames: [6, 6, 6, 7, 7, 8],
                speed: 0.1
            });
            this.sprite.animation.add('jump_down', {
                frames: [8, 9, 10],
                speed: 0.1
            });
            this.sprite.animation.add('sit', {
                frames: [6],
                speed: 0.1
            });
            this.sprite.animation.add('hit', {
                frames: [18, 19, 20, 21, 22],
                speed: 0.5
            });
            this.sprite.collides.boundaries = true;
            this.sprite.scrollable = false;
            this.sprite.animation.stop();
            this.sprite.animation.run('wait', {
                loop: true,
                reverse: false
            });
            this.sprite.position.x = 200;
            this.sprite.position.y = 400;
            this.sprite.anchor.x = this.sprite.width / 2;
            this.sprite.anchor.y = this.sprite.height / 2;
        },
        update: function() {
            if (game.input.key.SPACE) {
                this.sprite.animation.run('hit', {
                    loop: true
                });
            } else if (game.input.key.LEFT_ARROW) {
                this.sprite.flip.x = false;
                this.sprite.animation.run('run', {
                    loop: true
                });
                this.sprite.position.x -= 3;
            } else if (game.input.key.RIGHT_ARROW) {
                this.sprite.flip.x = true;
                this.sprite.animation.run('run', {
                    loop: true
                });
                this.sprite.position.x += 3;
            }
            if (game.input.key.DOWN_ARROW) {
                this.sprite.animation.run('sit', {
                    loop: false
                });
                this.sprite.position.y += 3;
            }
            if (game.input.key.UP_ARROW) {
                this.sprite.animation.run('jump', {
                    loop: false
                });
                this.sprite.position.y -= 3;
            }
            if (!game.input.key.LEFT_ARROW && !game.input.key.RIGHT_ARROW && !game.input.key.SPACE && !game.input.key.DOWN_ARROW && !game.input.key.UP_ARROW) {
                this.sprite.animation.run('wait', {
                    loop: true,
                    reverse: false
                });
            }
        },
        gravity: function() {
            if (this.sprite.position.y - this.sprite.anchor.y < 70) {
                game.physics.gravity.y = 9.78 / 60;
                this.sprite.animation.run('jump_down', {
                    loop: false,
                    reverse: false
                });
            } else if (this.sprite.position.y + this.sprite.anchor.y > game.width - 70) {
                game.physics.gravity.y = -9.78 / 60;
                this.sprite.animation.run('jump_up', {
                    loop: false,
                    reverse: false
                });
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,